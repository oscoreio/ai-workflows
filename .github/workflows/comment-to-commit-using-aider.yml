name: Comment to Commit using Aider
on:
  workflow_call:
    inputs:
      comment-id:
        description: "ID of the comment that triggered the workflow"
        required: true
        type: number
      pr-url:
        description: "URL of the pull request"
        required: true
        type: string
      model:
        description: "Model to use"
        required: false
        type: string
        default: "o3-mini"
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      map-tokens:
        description: "Map tokens"
        required: false
        type: number
        default: 5000
    secrets:
      openai-api-key:
        description: "OpenAI API key"
        required: false
      anthropic-api-key:
        description: "Anthropic API Key"
        required: false
      groq-api-key:
        description: "Groq API Key"
        required: false
      gemini-api-key:
        description: "Gemini API Key"
        required: false
      cohere-api-key:
        description: "Cohere API Key"
        required: false
      openrouter-api-key:
        description: "OpenRouter API Key"
        required: false
      deepseek-api-key:
        description: "Deepseek API Key"
        required: false

jobs:
  create-commit:
    permissions:
      issues: write
      pull-requests: write
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Extract PR info and comment body
        uses: actions/github-script@v7
        id: extract_info
        with:
          script: |
            // Add "eyes" reaction to the comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ inputs.comment-id }},
              content: 'eyes'
            });

            // Extract PR number from PR URL
            const prUrl = "${{ inputs.pr-url }}";
            const prNumber = parseInt(prUrl.split('/').pop());
            
            // Get PR data to extract branch
            const prData = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Get comment text
            const commentData = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ inputs.comment-id }}
            });
            
            // Check if "completed" reaction exists and delete it
            const reactions = await github.rest.reactions.listForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ inputs.comment-id }}
            });
            
            for (const reaction of reactions.data) {
              if (reaction.content === 'rocket') {
                // Delete completed reaction
                await github.rest.reactions.deleteForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: ${{ inputs.comment-id }},
                  reaction_id: reaction.id
                });
              }
            }
            
            // Try to find related issue number from PR title or body
            let issueNumber = null;
            
            // Check PR title and body for references like "Fixes #123", "Closes #123", etc.
            const titleAndBody = prData.data.title + "\n" + prData.data.body;
            const issueRegex = /(close[sd]?|fix(e[sd])?|resolve[sd]?)\s+#(\d+)/gi;
            const matches = [...titleAndBody.matchAll(issueRegex)];
            
            if (matches.length > 0) {
              // Use the first matched issue number
              issueNumber = parseInt(matches[0][3]);
            }
            
            // If we couldn't find issue from title/body, check if PR itself was created from an issue
            if (!issueNumber) {
              try {
                // Check PR body for "Resolves: #X" pattern that GitHub adds
                const resolveMatch = prData.data.body.match(/\bresolves:?\s+#(\d+)/i);
                if (resolveMatch) {
                  issueNumber = parseInt(resolveMatch[1]);
                }
              } catch (e) {
                // Ignore errors, fallback to PR number
              }
            }
            
            // Fallback to PR number if no issue found
            if (!issueNumber) {
              issueNumber = prNumber;
              console.log("No linked issue found, using PR number as fallback");
            } else {
              console.log(`Found linked issue: #${issueNumber}`);
            }
            
            // Set individual outputs instead of a complex JSON object
            core.setOutput("pr_number", prNumber);
            core.setOutput("issue_number", issueNumber);
            core.setOutput("branch", prData.data.head.ref);
            core.setOutput("comment_body", commentData.data.body);

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.extract_info.outputs.branch }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install LangChain CLI
        run: |
          dotnet tool install --global langchain.cli --prerelease
          langchain auth openai ${{ secrets.openai-api-key }} --model latest-smart

      - name: Setup Git user
        run: |
          git config --local user.email "bot@aider.com"
          git config --local user.name "github-actions[bot]"

      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const commentBody = "${{ steps.extract_info.outputs.comment_body }}";
            // Remove '@aider' from the comment
            const prompt = commentBody.replace(/@aider/g, '').trim();
            return `Apply all necessary changes in one step(it automated and will be just commited so no ask user anything) based on below issue description. \Comment body: ${prompt}`;

      - name: Try extract model from labels
        uses: actions/github-script@v7
        id: try_extract_model_from_labels
        with:
          result-encoding: string
          script: |
            const issueNumber = ${{ steps.extract_info.outputs.issue_number }};
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const labels = result.data.labels;

            if (labels.some(label => label.name.startsWith('aider-model-r1-free'))) {
              return 'openrouter/deepseek/deepseek-r1:free';
            }

            const model = labels.find(label => label.name.startsWith('aider-model-'));
            if (model) {
              return model.name.split('ider-model-')[1];
            }

            return "${{ inputs.model }}";

      - name: Try extract reasoning effort from labels
        uses: actions/github-script@v7
        id: try_extract_reasoning_effort_from_labels
        with:
          result-encoding: string
          script: |
            const issueNumber = ${{ steps.extract_info.outputs.issue_number }};
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const labels = result.data.labels;

            const reasoning_effort = labels.find(label => label.name.startsWith('reasoning-effort-'));
            if (reasoning_effort) {
              const value = reasoning_effort.name.split('easoning-effort-')[1];
              return `--reasoning-effort ${value}`;
            }

            return "";

      - name: Show extracted data
        run: |
          echo "PR Number: ${{ steps.extract_info.outputs.pr_number }}"
          echo "Issue Number: ${{ steps.extract_info.outputs.issue_number }}"
          echo "Branch: ${{ steps.extract_info.outputs.branch }}"
          echo "prompt: ${{ steps.create_prompt.outputs.result }}"
          echo "model: ${{ steps.try_extract_model_from_labels.outputs.result }}"
          echo "reasoning_effort: ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-aider-chat
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Apply changes with Aider
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          # API keys - Used implicitly by Aider
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
          
        run: |
          pip install aider-chat
          
          aider --model "${{ steps.try_extract_model_from_labels.outputs.result }}" --yes-always --watch-files --skip-sanity-check-repo --message "${{ steps.create_prompt.outputs.result }}" --no-auto-commits --map-tokens ${{ inputs.map-tokens }} ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}

      - name: Check for changes
        id: changes
        run: |
          CHANGED=$(git diff --name-only -- . ':!.gitignore')
          if [ -z "$CHANGED" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.changes.outputs.has_changes == 'true'
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          # API keys - Used implicitly by Aider
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: |
          git add . ':!.gitignore'
          aider --model "${{ steps.try_extract_model_from_labels.outputs.result }}" --commit --yes-always --watch-files --skip-sanity-check-repo
          git push --force-with-lease -u origin ${{ steps.extract_info.outputs.branch }}

      - name: Upload input history
        uses: actions/upload-artifact@v4
        with:
          name: aider-input-history
          path: .aider.input.history

      - name: Upload chat history
        uses: actions/upload-artifact@v4
        with:
          name: aider-chat-history
          path: .aider.chat.history.md

      - name: Create comment with Aider output
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Summarize the aider chat history file
            let chatContent = '';
            const { execSync } = require('child_process');
            try {
              chatContent = execSync('langchain summarize --input-file .aider.chat.history.md --prompt "Summarize the chat history. Only summarize what it DID, not settings, time, version, repo-map, token count, etc. Assume that it's you who did the changes, not Aider."', { encoding: 'utf-8' });
              console.log('CLI Output:', output);
            } catch (error) {
              console.error('Error running CLI tool:', error);
            }
            
            // Create a new comment with the aider output
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.extract_info.outputs.pr_number }},
              body: `${chatContent}`
            });

      - name: Add completed reaction
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Add "completed" reaction (rocket) to the comment
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ inputs.comment-id }},
              content: 'rocket'
            });
