name: Issue to PR using Devin
on:
  workflow_call:
    inputs:
      issue-number:
        description: "Issue number"
        required: true
        type: number
      max-acu-limit:
        description: "Maximum ACU limit for the Devin session"
        required: false
        type: number
        default: 5
    secrets:
      devin-api-key:
        description: "Devin API key"
        required: true

jobs:
  create-devin-session:
    permissions:
      issues: write
      pull-requests: write
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Add eyes reaction to issue
        uses: actions/github-script@v7
        id: add_eyes_reaction
        with:
          script: |
            // Add "eyes" reaction to the issue
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }},
              content: 'eyes'
            });
            
            // Check if "completed" reaction exists and delete it
            const reactions = await github.rest.reactions.listForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            
            for (const reaction of reactions.data) {
              if (reaction.content === 'rocket') {
                // Delete completed reaction
                await github.rest.reactions.deleteForIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ inputs.issue-number }},
                  reaction_id: reaction.id
                });
              }
            }

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Devin session
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch issue data in human-readable format
          gh issue view ${{ inputs.issue-number }} > issue_data.txt
          gh issue view ${{ inputs.issue-number }} --comments > issue_comments.txt
          
          # Create the prompt text
          cat > prompt.txt << 'EOF'
          Fix the issue #${{ inputs.issue-number }} in the repository ${{ github.repository }} and create a pull request.
          
          Use the following context:
          
          Issue data:
          ```
          EOF
          
          # Add issue data and comments to prompt
          cat issue_data.txt >> prompt.txt
          echo '```' >> prompt.txt
          echo '' >> prompt.txt
          echo 'Issue comments:' >> prompt.txt
          echo '```' >> prompt.txt
          cat issue_comments.txt >> prompt.txt
          echo '```' >> prompt.txt
          
          # Create JSON payload using jq with file input for proper escaping
          jq -n --rawfile prompt prompt.txt '{
            prompt: $prompt,
            idempotent: true,
            max_acu_limit: ${{ inputs.max-acu-limit }}
          }' > payload.json
          
          # Make the API call
          response=$(curl --silent --request POST \
            --url https://api.devin.ai/v1/sessions \
            --header "Authorization: Bearer ${{ secrets.devin-api-key }}" \
            --header 'Content-Type: application/json' \
            --data @payload.json)
          
          echo "Devin session created successfully"
          echo "$response" | jq -r '.session_url // "No session URL in response"'
          
          # Clean up temporary files
          rm -f issue_data.txt issue_comments.txt prompt.txt payload.json
