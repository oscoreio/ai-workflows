name: Issue to PR using Aider
on:
  workflow_call:
    inputs:
      issue-number:
        description: "Issue number"
        required: true
        type: number
      default-branch:
        description: "Default branch name"
        required: false
        type: string
        default: "main"
      model:
        description: "Model to use"
        required: false
        type: string
        default: "gpt-4o"
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      map-tokens:
        description: "Map tokens"
        required: false
        type: number
        default: 5000
    secrets:
      user-email:
        description: "Email to set in git config --local user.email"
        required: false
      user-name:
        description: "Email to set in git config --local user.name"
        required: false
      personal-access-token:
        description: "Personal Access Token for PR creation"
        required: false
      openai-api-key:
        description: "OpenAI API key"
        required: false
      anthropic-api-key:
        description: "Anthropic API Key"
        required: false
      groq-api-key:
        description: "Groq API Key"
        required: false
      gemini-api-key:
        description: "Gemini API Key"
        required: false
      cohere-api-key:
        description: "Cohere API Key"
        required: false
      openrouter-api-key:
        description: "OpenRouter API Key"
        required: false
      deepseek-api-key:
        description: "Deepseek API Key"
        required: false

jobs:
  create-pull-request:
    permissions:
      issues: read
      pull-requests: write
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Git user
        run: |
          git config --local user.email "${{ secrets.user-email || 'bot@aider.com' }}"
          git config --local user.name "${{ secrets.user-name || 'github-actions[bot]' }}"

      - name: Generate branch name
        id: branch
        run: echo "branch_name=aider/issue-${{ inputs.issue-number }}_$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch.outputs.branch_name }} origin/${{ inputs.default-branch }}
          git rebase ${{ inputs.default-branch }}

      - name: Install LangChain CLI
        run: |
          dotnet tool install --global langchain.cli --prerelease
          langchain auth openai ${{ secrets.openai-api-key }} --model latest-smart

      - name: Create Aider prompt
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find files and strip the './' prefix using sed
          file_list=$(find . -type f | sed 's|^\./||')
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          
          echo "Return suitable files for for issue with these data:" > prompt.txt
          echo "$issue_data" >> prompt.txt
          echo "------------------------------" >> prompt.txt
          echo "List of all files in the repo:" >> prompt.txt
          echo "$file_list" >> prompt.txt
          echo "------------------------------" >> prompt.txt
          echo "Returns answer in same format as in `List of all files in the repo:` block" >> prompt.txt
          cat prompt.txt
          
          suitable_files=$(langchain generate --input-file prompt.txt)
          
          echo "Suitable files:"
          echo "$suitable_files"
          
          echo "Apply all necessary changes in one step (automated commit) based on the issue details:" > .aider.prompt.md
          echo "$issue_data" >> .aider.prompt.md
          echo "------------------------------" >> .aider.prompt.md
          echo "List of suitable files in the repo:" >> .aider.prompt.md
          echo "$suitable_files" >> .aider.prompt.md
          echo "------------------------------" >> .aider.prompt.md
          
          echo "Aider Prompt:"
          cat .aider.prompt.md
          
      - name: Try extract model from labels
        uses: actions/github-script@v7
        id: try_extract_model_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;

            if (labels.some(label => label.name.startsWith('aider-model-r1-free'))) {
              return 'openrouter/deepseek/deepseek-r1:free';
            }

            const model = labels.find(label => label.name.startsWith('aider-model-'));
            if (model) {
              return model.name.split('ider-model-')[1].replace('-high', '');
            }

            const model2 = labels.find(label => label.name.startsWith('aider-'));
            if (model2) {
              return model2.name.split('ider-')[1].replace('-high', '');
            }

            return "${{ inputs.model }}";

      - name: Try extract reasoning effort from labels
        uses: actions/github-script@v7
        id: try_extract_reasoning_effort_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;
            
            const model = labels.find(label => label.name.startsWith('aider-model-'));
            if (model && model.name.endsWith('-high')) {
              return "--reasoning-effort high";
            }
            
            const model2 = labels.find(label => label.name.startsWith('aider-'));
            if (model2 && model2.name.endsWith('-high')) {
              return "--reasoning-effort high";
            }

            const reasoning_effort = labels.find(label => label.name.startsWith('reasoning-effort-'));
            if (reasoning_effort) {
              const value = reasoning_effort.name.split('easoning-effort-')[1];
              return `--reasoning-effort ${value}`;
            }

            return "";

      - name: Show extracted data
        run: |
          echo "model: ${{ steps.try_extract_model_from_labels.outputs.result }}"
          echo "reasoning_effort: ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}"
          echo "branch: ${{ steps.branch.outputs.branch_name }}"

      - name: Apply changes with Aider
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          # API keys - Used implicitly by Aider
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
          
        run: |
          pip install aider-chat
          
          aider --model "${{ steps.try_extract_model_from_labels.outputs.result }}" --yes-always --message-file .aider.prompt.md --no-auto-commits --map-tokens ${{ inputs.map-tokens }} ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}

      - name: Check for changes
        id: changes
        run: |
          CHANGED=$(git diff --name-only -- . ':!.gitignore')
          if [ -z "$CHANGED" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add . ':!.gitignore'
          git commit -m "feat: Closes issue #${{ inputs.issue-number }}"
          git push --force-with-lease -u origin ${{ steps.branch.outputs.branch_name }}

      - name: Wait for 15 seconds
        if: steps.changes.outputs.has_changes == 'true'
        run: sleep 15

      - name: Create pull request
        if: steps.changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.personal-access-token || secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
          -B ${{ inputs.default-branch }} \
          -H ${{ steps.branch.outputs.branch_name }} \
          --title "${{ inputs.issue-number }}: @coderabbitai" \
          --body "Closes #${{ inputs.issue-number }}.
          @coderabbitai summary"

      - name: Upload prompt
        uses: actions/upload-artifact@v4
        with:
          name: aider-prompt
          path: .aider.prompt.md

      - name: Upload input history
        uses: actions/upload-artifact@v4
        with:
          name: aider-input-history
          path: .aider.input.history

      - name: Upload chat history
        uses: actions/upload-artifact@v4
        with:
          name: aider-chat-history
          path: .aider.chat.history.md
