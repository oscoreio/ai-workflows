name: Issue to PR using Aider
on:
  workflow_call:
    inputs:
      issue-number:
        description: "Issue number"
        required: true
        type: number
      install-command:
        description: "Command to run to install dependencies"
        required: false
        type: string
        default: ""
      autofix-command:
        description: "Command to run to autofix code"
        required: false
        type: string
        default: ""
      test-command:
        description: "Command to run tests after changes"
        required: false
        type: string
        default: ""
      default-branch:
        description: "Default branch name"
        required: false
        type: string
        default: "main"
      model:
        description: "Model to use"
        required: false
        type: string
        default: "o3"
      provider:
        description: "Provider to use"
        required: false
        type: string
        default: "openai"
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 15
      map-tokens:
        description: "Map tokens"
        required: false
        type: number
        default: 5000
    secrets:
      user-email:
        description: "Email to set in git config --local user.email"
        required: false
      user-name:
        description: "Email to set in git config --local user.name"
        required: false
      personal-access-token:
        description: "Personal Access Token for PR creation"
        required: false
      openai-api-key:
        description: "OpenAI API key"
        required: false
      anthropic-api-key:
        description: "Anthropic API Key"
        required: false
      groq-api-key:
        description: "Groq API Key"
        required: false
      gemini-api-key:
        description: "Gemini API Key"
        required: false
      cohere-api-key:
        description: "Cohere API Key"
        required: false
      openrouter-api-key:
        description: "OpenRouter API Key"
        required: false
      deepseek-api-key:
        description: "Deepseek API Key"
        required: false
      figma-api-key:
        description: "Figma API Key"
        required: false

jobs:
  create-pull-request:
    permissions:
      issues: write
      pull-requests: write
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Add eyes reaction to issue
        uses: actions/github-script@v7
        id: add_eyes_reaction
        with:
          script: |
            // Add "eyes" reaction to the issue
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }},
              content: 'eyes'
            });
            
            // Check if "completed" reaction exists and delete it
            const reactions = await github.rest.reactions.listForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            
            for (const reaction of reactions.data) {
              if (reaction.content === 'rocket') {
                // Delete completed reaction
                await github.rest.reactions.deleteForIssue({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ inputs.issue-number }},
                  reaction_id: reaction.id
                });
              }
            }

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Git user
        run: |
          git config --local user.email "${{ secrets.user-email || 'bot@aider.com' }}"
          git config --local user.name "${{ secrets.user-name || 'github-actions[bot]' }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install AI CLI
        run: dotnet tool install --global tryAGI.AI --prerelease

      - name: Verify there are at least one valid API key
        env:
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: ai --input "Answer 123" --provider ${{ inputs.provider }}

      - name: Generate branch name
        id: branch
        run: echo "branch_name=aider/issue-${{ inputs.issue-number }}_$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch.outputs.branch_name }} origin/${{ inputs.default-branch }}
          git rebase ${{ inputs.default-branch }}

      - name: Create Aider prompt
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
          FIGMA_API_KEY: ${{ secrets.figma-api-key }}
        run: |
          # Find files and strip the './' prefix using sed
          file_list=$(find . -type f | sed 's|^\./||')
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
    
          # Create suitable files prompt; escape backticks to avoid unwanted command substitution
          {
            echo "Return suitable files for issue with these data (not more than 10 files):"
            echo "$issue_data"
            echo "$issue_comments"
            echo "------------------------------"
            echo "List of all files in the repo:"
            echo "$file_list"
            echo "------------------------------"
          } > .aider.suitable-files.prompt.md
          
          echo "###################################################"
          echo "Suitable files:PROMPT"
          cat .aider.suitable-files.prompt.md
          echo "###################################################"

          suitable_files=$(ai --format lines --input-file .aider.suitable-files.prompt.md --provider ${{ inputs.provider }})

          echo "###################################################"
          echo "Suitable files:ANSWER"
          echo "$suitable_files"
          echo "###################################################"
          
          # Create suitable files with dependecies prompt; escape backticks to avoid unwanted command substitution
          {
            echo "Return suitable files and their first-level dependencies files (not more than 15 files) for issue with these data:"
            echo "$issue_data"
            echo "$issue_comments"
            echo "------------------------------"
            echo "List of all files in the repo:"
            echo "$file_list"
            echo "------------------------------"
          } > .aider.suitable-files-with-deps.prompt.md
          
          # Write all content of suitable files to .aider.suitable-files-with-deps.prompt.md
          for file in $suitable_files; do
            # Check if the file exists
            if [ -f "$file" ]; then
              echo "Suitable file: $file"
              # Check if the file is not too large
              if [ $(wc -l < "$file") -lt 1000 ]; then
                {
                  echo ""
                  echo "$file"
                  echo "------------------------------"
                  cat $file
                  echo "------------------------------"
                } >> .aider.suitable-files-with-deps.prompt.md
              else
                echo "Skipping file $file because it is too large"
              fi
            fi
          done
          
          echo "###################################################"
          echo "Suitable files with dependencies:PROMPT"
          cat .aider.suitable-files-with-deps.prompt.md
          echo "###################################################"
          
          suitable_files_with_deps=$(ai --format lines --input-file .aider.suitable-files-with-deps.prompt.md --provider ${{ inputs.provider }})
          
          echo "###################################################"
          echo "Suitable files with dependencies:ANSWER"
          echo "$suitable_files_with_deps"
          echo "###################################################"
          
          # Create full Aider prompt
          {
            echo "You are a professional software developer and should produce the best possible code, preferably keeping it concise."
            echo "Use English comments where necessary but only if it makes sense, don't be noisy."
            echo ""
            echo "Apply all necessary changes in one step (automated commit) based on the issue details:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "List of suitable files in the repo:"
            echo '```'
            echo "$suitable_files_with_deps"
            echo '```'
          } > .aider.prompt.md
        # run: |
        #   {
        #     echo "You are a professional programmer with 20 years of experience. You work in the ${{ github.repository }} repository on the issue #${{ inputs.issue-number }}"
        #     echo "Objective: Identify a list of relevant files (maximum 10) needed to resolve issue #${{ inputs.issue-number }} based on the details provided below."
        #     echo ""
        #     echo "Instructions:"
        #     echo "1. Retrieve and analyze the issue details and comments."
        #     echo "2. Use the search tool to find potentially relevant files in the codebase."
        #     echo "3. Select the most suitable files from the search results (maximum 10 total)."
        #     echo "4. Consider files explicitly mentioned, related to error messages/functionality, and potential dependencies (e.g., tests, calling functions)."
        #     echo "5. Return the final list of file paths, one path per line."
        #   } > .aider.suitable-files.prompt.md
          
        #   echo "###################################################"
        #   echo "Suitable files:PROMPT"
        #   cat .aider.suitable-files.prompt.md
        #   echo "###################################################"

        #   suitable_files=$(ai --tools filesystem github[issues] --format lines --input-file .aider.suitable-files.prompt.md --provider ${{ inputs.provider }})

        #   echo "###################################################"
        #   echo "Suitable files:ANSWER"
        #   echo "$suitable_files"
        #   echo "###################################################"
          
        #   # Detect Figma links and fetch data if found
        #   {
        #     echo "You are a professional programmer with 20 years of experience. You work in the ${{ github.repository }} repository on the issue #${{ inputs.issue-number }}"
        #     echo "Objective: First, identify any Figma design links (URLs starting with https://www.figma.com/file/... or https://www.figma.com/design/...) mentioned in issue #${{ inputs.issue-number }} or its comments using the github tool."
        #     echo ""
        #     echo "Instructions:"
        #     echo "1. Analyze the issue #${{ inputs.issue-number }} title, body, and comments."
        #     echo "2. Search for Figma URLs."
        #     echo "3. If Figma URLs are found:"
        #     echo "   a. Use the figma tool to access the Figma files using the found URLs."
        #     echo "   b. Extract key layout information, component structure, and styling details relevant to the issue."
        #     echo "   c. Return a json of the relevant design aspects."
        #     echo "4. If NO Figma URLs are found, return the exact string 'No Figma links found.'"
        #   } > .aider.figma-details.prompt.md

        #   echo "###################################################"
        #   echo "Figma Details:PROMPT"
        #   cat .aider.figma-details.prompt.md
        #   echo "###################################################"

        #   # Use --tools github figma and pass the token via env
        #   figma_details=$(ai --tools github[issues] figma --format json --input-file .aider.figma-details.prompt.md --provider ${{ inputs.provider }})

        #   echo "###################################################"
        #   echo "Figma Details:ANSWER"
        #   echo "$figma_details"
        #   echo "###################################################"
          
        #   issue_data=$(gh issue view ${{ inputs.issue-number }})
        #   issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
        #   # Create full Aider prompt
        #   {
        #     echo "You are a professional software developer and should produce the best possible code, preferably keeping it concise."
        #     echo "Use English comments where necessary but only if it makes sense, don't be noisy."
        #     echo ""
        #     echo "Apply all necessary changes in one step (automated commit) based on the issue details:"
        #     echo ""
        #     echo '```'
        #     echo "$issue_data"
        #     echo "$issue_comments"
        #     echo '```'
        #     echo ""
        #     echo "List of suitable files in the repo:"
        #     echo '```'
        #     echo "$suitable_files"
        #     echo '```'
            
        #     # Conditionally add Figma data to the prompt
        #     if [[ -n "$figma_details" && "$figma_details" != "No Figma links found." ]]; then
        #       echo ""
        #       echo "Figma Design Details:"
        #       echo '```'
        #       echo "$figma_details"
        #       echo '```'
        #     fi
        #   } > .aider.prompt.md
          
        #   echo "###################################################"
        #   echo "Aider Prompt:"
        #   cat .aider.prompt.md
        #   echo "###################################################"
          
      - name: Extract, download and prepare images from issue
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Seems better than secrets.personal-access-token because it can not contain required permissions
        id: process_images
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            // Get issue and comments
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            
            const body = result.data.body || '';
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            
            // Regular expression to match GitHub image URLs
            const imageRegex = /!\[.*?\]\((https:\/\/github\.com\/user-attachments\/assets\/[a-f0-9-]+)\)/g;
            
            // Extract images from issue body and comments
            let match;
            let imageUrls = [];
            while ((match = imageRegex.exec(body)) !== null) {
              imageUrls.push(match[1]);
            }
            
            for (const comment of comments.data) {
              const commentBody = comment.body || '';
              imageRegex.lastIndex = 0; // Reset regex index
              while ((match = imageRegex.exec(commentBody)) !== null) {
                imageUrls.push(match[1]);
              }
            }
            
            // Process images if found
            if (imageUrls.length > 0) {
              console.log(`Found ${imageUrls.length} image(s) in issue and comments`);
              
              // Create directory for images
              execSync('mkdir -p .aider-images');
              
              // Download images using GitHub CLI instead of curl (handles authentication)
              let addCommands = [];
              
              let i = 0;
              for (const url of imageUrls) {
                if (url) {
                  i++;
                  
                  // Generate filename from URL
                  const filename = `.aider-images/${i}.png`;
                  
                  // Download image using GitHub CLI instead of curl (handles authentication)
                  console.log(`Downloading ${url} to ${filename}`);
                  try {
                    execSync(`gh api ${url} > "${filename}"`, { 
                      env: { ...process.env, GITHUB_TOKEN: process.env.GITHUB_TOKEN }
                    });
                    
                    // Add command for Aider
                    addCommands.push(filename);
                  } catch (error) {
                    console.error(`Error downloading ${url}: ${error.message}`);
                  }
                }
              }
              
              // Return args for later use
              const args = addCommands.join(' ');
              console.log("Aider args:", args);
              return args;
            } else {
              console.log("No images found in issue or comments");
              return '';
            }

      - name: Try extract model from labels
        uses: actions/github-script@v7
        id: try_extract_model_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;

            if (labels.some(label => label.name.startsWith('aider-r1-free'))) {
              return 'openrouter/deepseek/deepseek-r1:free';
            }

            const model = labels.find(label => label.name.startsWith('aider-'));
            if (model) {
              return model.name.split('ider-')[1].replace('-high', '');
            }

            return "${{ inputs.model }}";

      - name: Try extract reasoning effort from labels
        uses: actions/github-script@v7
        id: try_extract_reasoning_effort_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;
            
            const model = labels.find(label => label.name.startsWith('aider-'));
            if (model && model.name.endsWith('-high')) {
              return "--reasoning-effort high";
            }

            return "";

      - name: Install dependencies
        if: inputs.install-command != ''
        run: ${{ inputs.install-command }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-aider-chat
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Apply changes with Aider
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          # API keys - Used implicitly by Aider
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}

        run: |
          pip install aider-chat
          
          # # Conditionally define LINT_CMD if autofix-command is set
          # if [ -n "${{ inputs.autofix-command }}" ]; then
          #   LINT_CMD=(--lint-cmd "${{ inputs.autofix-command }}")
          # else
          #   LINT_CMD=()
          # fi

          # Add args "${LINT_CMD[@]}"

          # # Conditionally define TEST_CMD if test-command is set
          # if [ -n "${{ inputs.test-command }}" ]; then
          #   TEST_CMD=(--auto-test --test-cmd "${{ inputs.test-command }}")
          # else
          #   TEST_CMD=()
          # fi

          # Add args "${TEST_CMD[@]}"

          aider \
            --model "${{ steps.try_extract_model_from_labels.outputs.result }}" \
            --no-analytics \
            --yes-always \
            --watch-files \
            --skip-sanity-check-repo \
            --message-file .aider.prompt.md \
            --auto-commits \
            --map-tokens ${{ inputs.map-tokens }} \
            --no-detect-urls \
            ${{ steps.process_images.outputs.result }} \
            ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }} \

      - name: Run autofix command
        if: inputs.autofix-command != ''
        continue-on-error: true
        run: ${{ inputs.autofix-command }}

      - name: Run tests
        if: inputs.test-command != ''
        id: run-tests
        continue-on-error: true
        run: |
          echo "Running tests with command: ${{ inputs.test-command }}"
          ${{ inputs.test-command }} > .aider.test_output.txt 2>&1
          
          echo "Output:"
          cat .aider.test_output.txt
          
          echo "test_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Process test results with Aider
        if: inputs.test-command != '' && steps.run-tests.outcome == 'failure'
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: |
          {
            echo "Test command \`${{ inputs.test-command }}\` failed with exit code ${{ steps.run-tests.outputs.test_exit_code }}. Please fix the code based on the test output:"
            echo ""
            echo "\`\`\`"
            cat .aider.test_output.txt
            echo "\`\`\`"
            echo ""
            echo "Original Aider prompt:"
            echo ""
            cat .aider.prompt.md
            echo ""
            echo "Please fix the code based on the test output and the original Aider prompt."
          } > .aider.test-results.md
          
          echo "Aider Prompt:"
          cat .aider.test-results.md

          aider \
            --model "${{ steps.try_extract_model_from_labels.outputs.result }}" \
            --no-analytics \
            --yes-always \
            --watch-files \
            --skip-sanity-check-repo \
            --message-file .aider.test-results.md \
            --no-auto-commits \
            --map-tokens ${{ inputs.map-tokens }} \
            --no-detect-urls \
            ${{ steps.process_images.outputs.result }} \
            ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}

      - name: Run autofix command
        if: inputs.autofix-command != '' && inputs.test-command != '' && steps.run-tests.outcome == 'failure'
        continue-on-error: true
        run: ${{ inputs.autofix-command }}
  
      - name: Check if branch has new commits
        id: changes
        run: |
          git fetch origin ${{ inputs.default-branch }}
          COMMITS=$(git rev-list origin/${{ inputs.default-branch }}..HEAD --count)
          if [ "$COMMITS" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate PR name
        if: steps.changes.outputs.has_changes == 'true'
        id: pr
        continue-on-error: true
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: |
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
          chat_history=$(cat .aider.chat.history.md)
          
          # Create PR name generation prompt
          {
            echo "Return suitable name for a PR that closes issue with these data:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "Chat history of the Aider chat:"
            echo '```'
            echo "$chat_history"
            echo '```'
            echo "Returns scope like #123 where 123 is the issue number."
          } > .aider.pr-name.prompt.md
          
          cat .aider.pr-name.prompt.md
          
          name=$(ai --format ConventionalCommit --input-file .aider.pr-name.prompt.md --provider ${{ inputs.provider }})
          
          echo $name
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Generate PR description
        if: steps.changes.outputs.has_changes == 'true'
        id: pr-description
        continue-on-error: true
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: |
          # Create empty file if it doesn't exist
          touch .aider.pr-description.md

          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
          chat_history=$(cat .aider.chat.history.md)
          
          {
            echo "Return suitable description/summary for a PR that closes issue with these data:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "Chat history of the Aider chat:"
            echo '```'
            echo "$chat_history"
            echo '```'
          } > .aider.pr-description.prompt.md
          
          cat .aider.pr-description.prompt.md
          
          pr_body=$(ai --format markdown --input-file .aider.pr-description.prompt.md --provider ${{ inputs.provider }})
          
          echo $pr_body
          
          {
            echo "Closes #${{ inputs.issue-number }}"
            echo ""
            echo "$pr_body"
          } > .aider.pr-description.md

      - name: Push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: git push --force-with-lease -u origin ${{ steps.branch.outputs.branch_name }}

      - name: Wait for 15 seconds
        if: steps.changes.outputs.has_changes == 'true'
        run: sleep 15

      - name: Create pull request
        if: steps.changes.outputs.has_changes == 'true'
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.personal-access-token || secrets.GITHUB_TOKEN }}
        run: |
          pr_url=$(gh pr create \
          -B ${{ inputs.default-branch }} \
          -H ${{ steps.branch.outputs.branch_name }} \
          --title "${{ steps.pr.outputs.name || 'fix: Fixed issue' }}" \
          --body-file .aider.pr-description.md)
          echo "pr_url=$pr_url" >> $GITHUB_OUTPUT

      - name: Create comment with Aider output
        if: always()
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        with:
          script: |
            // Summarize the aider chat history file
            let chatContent = '';
            const { execSync } = require('child_process');
            try {
              chatContent = execSync('ai --input-file .aider.chat.history.md --input "Summarize the chat history in 20 words. Only summarize what it DID, not settings, time, version, repo-map, token count, etc. Assume that it\'s you who did the changes, not Aider. It should be a first person summary of what it did." --provider ${{ inputs.provider }}', { encoding: 'utf-8' });
              console.log('CLI Output:', chatContent);
            } catch (error) {
              console.error('Error running CLI tool:', error);
              chatContent = 'Failed to generate summary of changes.';
            }
            
            // Create workflow run link
            const workflowRunLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId || github.run_id || process.env.GITHUB_RUN_ID}`;
            
            // Get the PR URL if available, add link to PR
            let prLink = '';
            if ('${{ steps.create_pr.outputs.pr_url }}') {
              prLink = '### [View the Pull Request](${{ steps.create_pr.outputs.pr_url }})\n\n';
            }
            
            // Create a new comment with the aider output on the issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }},
              body: `${chatContent}\n\n${prLink}[View workflow run](${workflowRunLink})`
            });

      - name: Add completed reaction
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Add "completed" reaction (rocket) to the issue
            await github.rest.reactions.createForIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }},
              content: 'rocket'
            });

      - name: Show extracted data
        if: always()
        run: |
          echo "model: ${{ steps.try_extract_model_from_labels.outputs.result }}"
          echo "reasoning_effort: ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}"
          echo "branch: ${{ steps.branch.outputs.branch_name }}"
          echo "pr-name: ${{ steps.pr.outputs.name }}"
          echo "pr-name: ${{ steps.pr-description.outputs.value }}"
          echo "has_changes: ${{ steps.changes.outputs.has_changes }}"

      - name: Show Aider chat history
        if: always()
        run: cat .aider.chat.history.md