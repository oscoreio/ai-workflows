name: Issue to PR using Aider
on:
  workflow_call:
    inputs:
      issue-number:
        description: "Issue number"
        required: true
        type: number
      install-command:
        description: "Command to run to install dependencies"
        required: false
        type: string
        default: ""
      autofix-command:
        description: "Command to run to autofix code"
        required: false
        type: string
        default: ""
      test-command:
        description: "Command to run tests after changes"
        required: false
        type: string
        default: ""
      default-branch:
        description: "Default branch name"
        required: false
        type: string
        default: "main"
      model:
        description: "Model to use"
        required: false
        type: string
        default: "o3-mini"
      chat-timeout:
        description: "Timeout for chat in minutes to prevent burning your credits"
        required: false
        type: number
        default: 10
      map-tokens:
        description: "Map tokens"
        required: false
        type: number
        default: 5000
    secrets:
      user-email:
        description: "Email to set in git config --local user.email"
        required: false
      user-name:
        description: "Email to set in git config --local user.name"
        required: false
      personal-access-token:
        description: "Personal Access Token for PR creation"
        required: false
      openai-api-key:
        description: "OpenAI API key"
        required: false
      anthropic-api-key:
        description: "Anthropic API Key"
        required: false
      groq-api-key:
        description: "Groq API Key"
        required: false
      gemini-api-key:
        description: "Gemini API Key"
        required: false
      cohere-api-key:
        description: "Cohere API Key"
        required: false
      openrouter-api-key:
        description: "OpenRouter API Key"
        required: false
      deepseek-api-key:
        description: "Deepseek API Key"
        required: false

jobs:
  create-pull-request:
    permissions:
      issues: read
      pull-requests: write
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Git user
        run: |
          git config --local user.email "${{ secrets.user-email || 'bot@aider.com' }}"
          git config --local user.name "${{ secrets.user-name || 'github-actions[bot]' }}"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Generate branch name
        id: branch
        run: echo "branch_name=aider/issue-${{ inputs.issue-number }}_$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b ${{ steps.branch.outputs.branch_name }} origin/${{ inputs.default-branch }}
          git rebase ${{ inputs.default-branch }}

      - name: Install LangChain CLI
        run: |
          dotnet tool install --global langchain.cli --prerelease
          langchain auth openai ${{ secrets.openai-api-key }} --model latest-smart

      - name: Create Aider prompt
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find files and strip the './' prefix using sed
          file_list=$(find . -type f | sed 's|^\./||')
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
    
          # Create suitable files prompt; escape backticks to avoid unwanted command substitution
          {
            echo "Return suitable files for issue with these data (not more than 10 files):"
            echo "$issue_data"
            echo "$issue_comments"
            echo "------------------------------"
            echo "List of all files in the repo:"
            echo "$file_list"
            echo "------------------------------"
            echo "Returns answer in same format as in \`List of all files in the repo:\` block"
          } > .aider.suitable-files.prompt.md
          
          cat .aider.suitable-files.prompt.md
          
          suitable_files=$(langchain generate --input-file .aider.suitable-files.prompt.md)
          
          # Create suitable files with dependecies prompt; escape backticks to avoid unwanted command substitution
          {
            echo "Return suitable files and their first-level dependencies files (not more than 15 files) for issue with these data:"
            echo "$issue_data"
            echo "$issue_comments"
            echo "------------------------------"
            echo "List of all files in the repo:"
            echo "$file_list"
            echo "------------------------------"
            echo "Returns answer in same format as in \`List of all files in the repo:\` block"
          } > .aider.suitable-files-with-deps.prompt.md
          
          # Write all content of suitable files to .aider.suitable-files-with-deps.prompt.md
          for file in $suitable_files; do
            # Check if the file exists
            if [ -f "$file" ]; then
              echo "Suitable file: $file"
              # Check if the file is not too large
              if [ $(wc -l < "$file") -lt 1000 ]; then
                {
                  echo ""
                  echo "$file"
                  echo "------------------------------"
                  cat $file
                  echo "------------------------------"
                } >> .aider.suitable-files-with-deps.prompt.md
              else
                echo "Skipping file $file because it is too large"
              fi
            fi
          done
          
          cat .aider.suitable-files-with-deps.prompt.md
          
          suitable_files_with_deps=$(langchain generate --input-file .aider.suitable-files-with-deps.prompt.md)
          
          echo "Suitable files with dependencies:"
          echo "$suitable_files_with_deps"
          
          # Create full Aider prompt
          {
            echo "You are a professional software developer and should produce the best possible code, preferably keeping it concise."
            echo "Use English comments where necessary but only if it makes sense, don't be noisy."
            echo ""
            echo "Apply all necessary changes in one step (automated commit) based on the issue details:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "List of suitable files in the repo:"
            echo '```'
            echo "$suitable_files_with_deps"
            echo '```'
          } > .aider.prompt.md
          
          echo "Aider Prompt:"
          cat .aider.prompt.md
          
      - name: Try extract model from labels
        uses: actions/github-script@v7
        id: try_extract_model_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;

            if (labels.some(label => label.name.startsWith('aider-model-r1-free'))) {
              return 'openrouter/deepseek/deepseek-r1:free';
            }

            const model = labels.find(label => label.name.startsWith('aider-model-'));
            if (model) {
              return model.name.split('ider-model-')[1].replace('-high', '');
            }

            const model2 = labels.find(label => label.name.startsWith('aider-'));
            if (model2) {
              return model2.name.split('ider-')[1].replace('-high', '');
            }

            return "${{ inputs.model }}";

      - name: Try extract reasoning effort from labels
        uses: actions/github-script@v7
        id: try_extract_reasoning_effort_from_labels
        with:
          result-encoding: string
          script: |
            const result = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.issue-number }}
            });
            const labels = result.data.labels;
            
            const model = labels.find(label => label.name.startsWith('aider-model-'));
            if (model && model.name.endsWith('-high')) {
              return "--reasoning-effort high";
            }
            
            const model2 = labels.find(label => label.name.startsWith('aider-'));
            if (model2 && model2.name.endsWith('-high')) {
              return "--reasoning-effort high";
            }

            const reasoning_effort = labels.find(label => label.name.startsWith('reasoning-effort-'));
            if (reasoning_effort) {
              const value = reasoning_effort.name.split('easoning-effort-')[1];
              return `--reasoning-effort ${value}`;
            }

            return "";

      - name: Install dependencies in the background
        if: inputs.install-command != ''
        run: nohup ${{ inputs.install-command }} > /dev/null 2>&1 &

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-aider-chat
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Apply changes with Aider
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          # API keys - Used implicitly by Aider
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
          
        run: |
          pip install aider-chat
          
          aider --model "${{ steps.try_extract_model_from_labels.outputs.result }}" --yes-always  --watch-files --skip-sanity-check-repo --message-file .aider.prompt.md --no-auto-commits --map-tokens ${{ inputs.map-tokens }} ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}

      - name: Install dependencies
        if: inputs.install-command != ''
        run: ${{ inputs.install-command }}

      - name: Run autofix command
        if: inputs.autofix-command != ''
        continue-on-error: true
        run: ${{ inputs.autofix-command }}

      - name: Run tests
        if: inputs.test-command != ''
        id: run-tests
        continue-on-error: true
        run: |
          echo "Running tests with command: ${{ inputs.test-command }}"
          ${{ inputs.test-command }} > .aider.test_output.txt 2>&1
          
          echo "Output:"
          cat .aider.test_output.txt
          
          echo "test_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Process test results with Aider
        if: inputs.test-command != '' && steps.run-tests.outcome == 'failure'
        env:
          OPENAI_API_KEY: ${{ secrets.openai-api-key }}
          OPENROUTER_API_KEY: ${{ secrets.openrouter-api-key }}
          ANTHROPIC_API_KEY: ${{ secrets.anthropic-api-key }}
          COHERE_API_KEY: ${{ secrets.cohere-api-key }}
          GEMINI_API_KEY: ${{ secrets.gemini-api-key }}
          DEEPSEEK_API_KEY: ${{ secrets.deepseek-api-key }}
          GROQ_API_KEY: ${{ secrets.groq-api-key }}
        run: |
          {
            echo "Test command \`${{ inputs.test-command }}\` failed with exit code ${{ steps.run-tests.outputs.test_exit_code }}. Please fix the code based on the test output:"
            echo ""
            echo "\`\`\`"
            cat .aider.test_output.txt
            echo "\`\`\`"
            echo ""
            echo "Original Aider prompt:"
            echo ""
            cat .aider.prompt.md
            echo ""
            echo "Please fix the code based on the test output and the original Aider prompt."
          } > .aider.test-results.md
          
          echo "Aider Prompt:"
          cat .aider.test-results.md
          
          aider --model "${{ steps.try_extract_model_from_labels.outputs.result }}" --yes-always --message-file .aider.test-results.md --no-auto-commits --map-tokens ${{ inputs.map-tokens }} ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}

      - name: Run autofix command
        if: inputs.autofix-command != '' && inputs.test-command != '' && steps.run-tests.outcome == 'failure'
        continue-on-error: true
        run: ${{ inputs.autofix-command }}
  
      - name: Check for changes
        id: changes
        run: |
          CHANGED=$(git diff --name-only -- . ':!.gitignore')
          if [ -z "$CHANGED" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate PR name
        id: pr
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
          chat_history=$(cat .aider.chat.history.md)
          
          # Create PR name generation prompt
          {
            echo "Return suitable name for a PR that closes issue with these data:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "Chat history of the Aider chat:"
            echo '```'
            echo "$chat_history"
            echo '```'
            echo "Returns answer in the format of a PR title: 'fix(#123): Fix the bug' or 'feat(#123): Add new feature'."
            echo "Do not incude any whitespaces on the start or end of the title."
            echo "Do not incude any markdown formatting in the title."
          } > .aider.pr-name.prompt.md
          
          cat .aider.pr-name.prompt.md
          
          name=$(langchain generate --input-file .aider.pr-name.prompt.md)
          
          echo $name
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Generate PR description
        if: steps.changes.outputs.has_changes == 'true'
        id: pr-description
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          issue_data=$(gh issue view ${{ inputs.issue-number }})
          issue_comments=$(gh issue view ${{ inputs.issue-number }} --comments)
          chat_history=$(cat .aider.chat.history.md)
          
          {
            echo "Return suitable description/summary for a PR that closes issue with these data:"
            echo ""
            echo '```'
            echo "$issue_data"
            echo "$issue_comments"
            echo '```'
            echo ""
            echo "Chat history of the Aider chat:"
            echo '```'
            echo "$chat_history"
            echo '```'
            echo "It will be used as a PR description using markdown format."
          } > .aider.pr-description.prompt.md
          
          cat .aider.pr-description.prompt.md
          
          pr_body=$(langchain generate --input-file .aider.pr-description.prompt.md)
          
          echo $pr_body
          
          {
            echo "Closes #${{ inputs.issue-number }}"
            echo ""
            echo "$pr_body"
          } > .aider.pr-description.md

      - name: Push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add . ':!.gitignore'
          git commit -m "${{ steps.pr.outputs.name }}"
          git push --force-with-lease -u origin ${{ steps.branch.outputs.branch_name }}

      - name: Wait for 15 seconds
        if: steps.changes.outputs.has_changes == 'true'
        run: sleep 15

      - name: Create pull request
        if: steps.changes.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.personal-access-token || secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
          -B ${{ inputs.default-branch }} \
          -H ${{ steps.branch.outputs.branch_name }} \
          --title "${{ steps.pr.outputs.name }}" \
          --body-file .aider.pr-description.md

      - name: Show extracted data
        if: always()
        run: |
          echo "model: ${{ steps.try_extract_model_from_labels.outputs.result }}"
          echo "reasoning_effort: ${{ steps.try_extract_reasoning_effort_from_labels.outputs.result }}"
          echo "branch: ${{ steps.branch.outputs.branch_name }}"
          echo "pr-name: ${{ steps.pr.outputs.name }}"
          echo "pr-name: ${{ steps.pr-description.outputs.value }}"
          echo "has_changes: ${{ steps.changes.outputs.has_changes }}"

      - name: Show Aider chat history
        if: always()
        run: cat .aider.chat.history.md
